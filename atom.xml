<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-05T15:57:23.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Aran.Hu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript-函数式编程</title>
    <link href="http://yoursite.com/2017/03/28/javascript-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/03/28/javascript-函数式编程/</id>
    <published>2017-03-28T15:00:19.000Z</published>
    <updated>2018-07-05T15:57:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javascript-函数式编程"><a href="#javascript-函数式编程" class="headerlink" title="javascript-函数式编程"></a>javascript-函数式编程</h1><hr><blockquote><p>描述</p></blockquote><p>函数式编程函数式编程函数式编程函数式编程<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;javascript-函数式编程&quot;&gt;&lt;a href=&quot;#javascript-函数式编程&quot; class=&quot;headerlink&quot; title=&quot;javascript-函数式编程&quot;&gt;&lt;/a&gt;javascript-函数式编程&lt;/h1&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;函数式编程函数式编程函数式编程函数式编程&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>rn-键盘遮挡问题</title>
    <link href="http://yoursite.com/2017/03/28/rn-%E9%94%AE%E7%9B%98%E9%81%AE%E6%8C%A1%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/03/28/rn-键盘遮挡问题/</id>
    <published>2017-03-28T14:35:37.000Z</published>
    <updated>2018-07-04T17:15:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rn-键盘遮挡问题"><a href="#rn-键盘遮挡问题" class="headerlink" title="rn-键盘遮挡问题"></a>rn-键盘遮挡问题</h1><hr><p>1、KeyboardAvoidingView<br>2、DeviceEventEmitter(隐藏API系列)<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span> (props)&#123;</span><br><span class="line">   <span class="keyword">super</span>(props);</span><br><span class="line">   DeviceEventEmitter.addListener(<span class="string">'keyboardWillShow'</span>, <span class="keyword">this</span>.keyboardWillShow.bind(<span class="keyword">this</span>));</span><br><span class="line">   DeviceEventEmitter.addListener(<span class="string">'keyboardWillHide'</span>, <span class="keyword">this</span>.keyboardWillHide.bind(<span class="keyword">this</span>));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> keyboardWillShow (e)&#123;</span><br><span class="line">   <span class="keyword">this</span>.commentView &amp;&amp; <span class="keyword">this</span>.commentView.setNativeProps(&#123;</span><br><span class="line">           style: &#123;</span><br><span class="line">               height: commentHeight - e.endCoordinates.height</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> keyboardWillHide ()&#123;</span><br><span class="line">   <span class="keyword">this</span>.commentView &amp;&amp; <span class="keyword">this</span>.commentView.setNativeProps(&#123;</span><br><span class="line">           style: &#123;</span><br><span class="line">               height: commentHeight</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line"> &#125;  </span><br><span class="line"></span><br><span class="line">componentUnMount()&#123;</span><br><span class="line">   <span class="keyword">this</span>.keyboardWillHideEvent.remove()</span><br><span class="line">   <span class="keyword">this</span>.keyboardWillShowEvent.remove()</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>描述</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;rn-键盘遮挡问题&quot;&gt;&lt;a href=&quot;#rn-键盘遮挡问题&quot; class=&quot;headerlink&quot; title=&quot;rn-键盘遮挡问题&quot;&gt;&lt;/a&gt;rn-键盘遮挡问题&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;1、KeyboardAvoidingView&lt;br&gt;2、DeviceEventEmitter(隐藏API系列)&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>nodejs-异步与单线程</title>
    <link href="http://yoursite.com/2017/03/28/nodejs-%E5%BC%82%E6%AD%A5%E4%B8%8E%E5%8D%95%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/03/28/nodejs-异步与单线程/</id>
    <published>2017-03-28T14:31:26.000Z</published>
    <updated>2018-07-04T17:15:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Title"><a href="#Title" class="headerlink" title="Title"></a>Title</h1><hr><blockquote><p>描述</p></blockquote><p><a href="http://www.cnblogs.com/dolphinX/p/3475090.html" target="_blank" rel="external">http://www.cnblogs.com/dolphinX/p/3475090.html</a><br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Title&quot;&gt;&lt;a href=&quot;#Title&quot; class=&quot;headerlink&quot; title=&quot;Title&quot;&gt;&lt;/a&gt;Title&lt;/h1&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/dolphinX/p/3475090.html&quot;&gt;http://www.cnblogs.com/dolphinX/p/3475090.html&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>react</title>
    <link href="http://yoursite.com/2017/03/23/react/"/>
    <id>http://yoursite.com/2017/03/23/react/</id>
    <published>2017-03-23T14:50:16.000Z</published>
    <updated>2018-07-04T17:15:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Title"><a href="#Title" class="headerlink" title="Title"></a>Title</h1><hr><blockquote><p>描述</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Title&quot;&gt;&lt;a href=&quot;#Title&quot; class=&quot;headerlink&quot; title=&quot;Title&quot;&gt;&lt;/a&gt;Title&lt;/h1&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;描述&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>javascript-编译原理</title>
    <link href="http://yoursite.com/2017/03/23/javascript-%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2017/03/23/javascript-编译原理/</id>
    <published>2017-03-23T14:46:05.000Z</published>
    <updated>2018-07-04T17:15:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javascript-编译原理"><a href="#javascript-编译原理" class="headerlink" title="javascript-编译原理"></a>javascript-编译原理</h1><hr><blockquote><p>描述</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;javascript-编译原理&quot;&gt;&lt;a href=&quot;#javascript-编译原理&quot; class=&quot;headerlink&quot; title=&quot;javascript-编译原理&quot;&gt;&lt;/a&gt;javascript-编译原理&lt;/h1&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;描述&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>javascript-指针</title>
    <link href="http://yoursite.com/2017/03/23/javascript-%E6%8C%87%E9%92%88/"/>
    <id>http://yoursite.com/2017/03/23/javascript-指针/</id>
    <published>2017-03-23T14:45:51.000Z</published>
    <updated>2018-07-04T17:15:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javascript-指针"><a href="#javascript-指针" class="headerlink" title="javascript-指针"></a>javascript-指针</h1><hr><blockquote><p>描述</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;javascript-指针&quot;&gt;&lt;a href=&quot;#javascript-指针&quot; class=&quot;headerlink&quot; title=&quot;javascript-指针&quot;&gt;&lt;/a&gt;javascript-指针&lt;/h1&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;描述&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>javascript-闭包</title>
    <link href="http://yoursite.com/2017/03/23/javascript-%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/2017/03/23/javascript-闭包/</id>
    <published>2017-03-23T14:42:01.000Z</published>
    <updated>2018-07-04T17:15:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript闭包"><a href="#JavaScript闭包" class="headerlink" title="JavaScript闭包"></a>JavaScript闭包</h1><hr><blockquote><p>描述</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript闭包&quot;&gt;&lt;a href=&quot;#JavaScript闭包&quot; class=&quot;headerlink&quot; title=&quot;JavaScript闭包&quot;&gt;&lt;/a&gt;JavaScript闭包&lt;/h1&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;描述&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>RN-原生组件封装-IOS</title>
    <link href="http://yoursite.com/2017/03/20/rn-%E5%8E%9F%E7%94%9F%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85-ios/"/>
    <id>http://yoursite.com/2017/03/20/rn-原生组件封装-ios/</id>
    <published>2017-03-20T13:47:37.000Z</published>
    <updated>2018-07-04T17:15:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原生模块封装-IOS"><a href="#原生模块封装-IOS" class="headerlink" title="原生模块封装-IOS"></a>原生模块封装-IOS</h1><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a><a href="https://github.com/naivehhr/aran_native_log" target="_blank" rel="external">Demo</a></h3><h3 id="ps-还是得自己过坑😁"><a href="#ps-还是得自己过坑😁" class="headerlink" title="ps: 还是得自己过坑😁"></a>ps: 还是得自己过坑😁</h3><ul><li><p>1、创建一个用来调试模块的RN项目</p></li><li><p>2、在项目的node_module目录下创存放组件的目录比如A</p></li><li><p>3、XCODE打开RN项目中的IOS项目, 完成原生模块的封装及测试</p></li><li><p>4、封装完成后, 使用XCODE在目录A中创建静态库项目(模块名称最好和上面调试模块的名称一致)</p></li></ul><a id="more"></a><ul><li><p>5、把RN-&gt;IOS项目中封装模块的代码.h.m拷贝到静态库文件中</p></li><li><p>6、设置静态库项目的header search path路径(添加React的依赖)</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Build Settings-&gt;Header Search Patchs-&gt;$(SRCROOT)/../../react-native/React -&gt; recursive</span><br></pre></td></tr></table></figure><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ul><li>1 如果是别人的库，按照要求添加应该就OK</li><li>2 自己开发的库如果出现找不到React相关依赖时，查看引用路径，或组件导出输出路径是否正确(90%是这的问题)</li><li>3 可直接在依赖静态库中更改Search Paths</li></ul><p><img src="/2017/03/20/rn-原生组件封装-ios/RN-原生组件封装-IOS/setting_header_search_paths.png" alt="Alt text"></p><h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><blockquote><p>更多原生事件等</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;原生模块封装-IOS&quot;&gt;&lt;a href=&quot;#原生模块封装-IOS&quot; class=&quot;headerlink&quot; title=&quot;原生模块封装-IOS&quot;&gt;&lt;/a&gt;原生模块封装-IOS&lt;/h1&gt;&lt;h3 id=&quot;Demo&quot;&gt;&lt;a href=&quot;#Demo&quot; class=&quot;headerlink&quot; title=&quot;Demo&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/naivehhr/aran_native_log&quot;&gt;Demo&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;ps-还是得自己过坑😁&quot;&gt;&lt;a href=&quot;#ps-还是得自己过坑😁&quot; class=&quot;headerlink&quot; title=&quot;ps: 还是得自己过坑😁&quot;&gt;&lt;/a&gt;ps: 还是得自己过坑😁&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1、创建一个用来调试模块的RN项目&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2、在项目的node_module目录下创存放组件的目录比如A&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3、XCODE打开RN项目中的IOS项目, 完成原生模块的封装及测试&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;4、封装完成后, 使用XCODE在目录A中创建静态库项目(模块名称最好和上面调试模块的名称一致)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="react-native" scheme="http://yoursite.com/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>RN-原生组件封装-Android</title>
    <link href="http://yoursite.com/2017/03/20/rn-%E5%8E%9F%E7%94%9F%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85-android/"/>
    <id>http://yoursite.com/2017/03/20/rn-原生组件封装-android/</id>
    <published>2017-03-20T13:47:29.000Z</published>
    <updated>2018-07-04T17:15:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原生模块封装-ANDROID"><a href="#原生模块封装-ANDROID" class="headerlink" title="原生模块封装-ANDROID"></a>原生模块封装-ANDROID</h1><hr><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a><a href="https://github.com/naivehhr/aran_native_log" target="_blank" rel="external">Demo</a></h3><h3 id="ref"><a href="#ref" class="headerlink" title="ref:"></a>ref:</h3><p><a href="http://www.jianshu.com/p/73ef53244a7b" target="_blank" rel="external">1</a> <a href="http://www.jianshu.com/p/07b928feee3b" target="_blank" rel="external">2</a> <a href="http://www.liuchungui.com/blog/2016/05/08/reactnativezhi-yuan-sheng-mo-kuai-kai-fa-bing-fa-bu-androidpian/" target="_blank" rel="external">3</a></p><h3 id="ps-还是得自己过坑😁"><a href="#ps-还是得自己过坑😁" class="headerlink" title="ps: 还是得自己过坑😁"></a>ps: 还是得自己过坑😁</h3><ul><li><p>1、用Android Studio打开创建RN项目中的Android项目(比如成为A)</p></li><li><p>2、在A的根目录中新建一个Module(右键或者File -&gt; New -&gt; New Module)，这里称为BModule</p></li><li><p>3、在B中添加自己要封装的模块比如Toast的实现</p></li><li><p>4、B中的依赖要和母RN项目一致或不要过高(有警告)</p></li><li><p>5、引用的话就直接react-native link</p><a id="more"></a></li></ul><blockquote><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>封装组件时候尽量保持如下目录(图1); 引用时候路径</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include &apos;:aran-native-log&apos;</span><br><span class="line">project(&apos;:aran-native-log&apos;).projectDir = new File(rootProject.projectDir, &apos;../node_modules/aran-native-log/android&apos;)</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/20/rn-原生组件封装-android/RN-原生组件封装-Android/catalogue.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>图一</p><h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><blockquote><p>更多原生事件等</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;原生模块封装-ANDROID&quot;&gt;&lt;a href=&quot;#原生模块封装-ANDROID&quot; class=&quot;headerlink&quot; title=&quot;原生模块封装-ANDROID&quot;&gt;&lt;/a&gt;原生模块封装-ANDROID&lt;/h1&gt;&lt;hr&gt;
&lt;h3 id=&quot;Demo&quot;&gt;&lt;a href=&quot;#Demo&quot; class=&quot;headerlink&quot; title=&quot;Demo&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/naivehhr/aran_native_log&quot;&gt;Demo&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;ref&quot;&gt;&lt;a href=&quot;#ref&quot; class=&quot;headerlink&quot; title=&quot;ref:&quot;&gt;&lt;/a&gt;ref:&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/73ef53244a7b&quot;&gt;1&lt;/a&gt; &lt;a href=&quot;http://www.jianshu.com/p/07b928feee3b&quot;&gt;2&lt;/a&gt; &lt;a href=&quot;http://www.liuchungui.com/blog/2016/05/08/reactnativezhi-yuan-sheng-mo-kuai-kai-fa-bing-fa-bu-androidpian/&quot;&gt;3&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;ps-还是得自己过坑😁&quot;&gt;&lt;a href=&quot;#ps-还是得自己过坑😁&quot; class=&quot;headerlink&quot; title=&quot;ps: 还是得自己过坑😁&quot;&gt;&lt;/a&gt;ps: 还是得自己过坑😁&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1、用Android Studio打开创建RN项目中的Android项目(比如成为A)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2、在A的根目录中新建一个Module(右键或者File -&amp;gt; New -&amp;gt; New Module)，这里称为BModule&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3、在B中添加自己要封装的模块比如Toast的实现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;4、B中的依赖要和母RN项目一致或不要过高(有警告)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;5、引用的话就直接react-native link&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="react-native" scheme="http://yoursite.com/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>js-es6</title>
    <link href="http://yoursite.com/2017/03/12/js-es6/"/>
    <id>http://yoursite.com/2017/03/12/js-es6/</id>
    <published>2017-03-12T15:29:51.000Z</published>
    <updated>2018-07-04T17:15:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Title"><a href="#Title" class="headerlink" title="Title"></a>Title</h1><hr><blockquote><p>描述</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Title&quot;&gt;&lt;a href=&quot;#Title&quot; class=&quot;headerlink&quot; title=&quot;Title&quot;&gt;&lt;/a&gt;Title&lt;/h1&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;描述&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>js-basic</title>
    <link href="http://yoursite.com/2017/03/12/js-basic/"/>
    <id>http://yoursite.com/2017/03/12/js-basic/</id>
    <published>2017-03-12T15:29:39.000Z</published>
    <updated>2018-07-04T17:15:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Title"><a href="#Title" class="headerlink" title="Title"></a>Title</h1><hr><blockquote><p>描述</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Title&quot;&gt;&lt;a href=&quot;#Title&quot; class=&quot;headerlink&quot; title=&quot;Title&quot;&gt;&lt;/a&gt;Title&lt;/h1&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;描述&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>RN-Promotion</title>
    <link href="http://yoursite.com/2017/03/12/rn-promotion/"/>
    <id>http://yoursite.com/2017/03/12/rn-promotion/</id>
    <published>2017-03-12T15:09:28.000Z</published>
    <updated>2018-07-04T17:15:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RN-记录的组件"><a href="#RN-记录的组件" class="headerlink" title="RN-记录的组件"></a>RN-记录的组件</h1><hr><blockquote><p>项目中一些组件的实现及相关实践</p></blockquote><a id="more"></a><h2 id="日历"><a href="#日历" class="headerlink" title="日历"></a>日历</h2><h2 id="自定义Scrollview下拉动画"><a href="#自定义Scrollview下拉动画" class="headerlink" title="自定义Scrollview下拉动画"></a>自定义Scrollview下拉动画</h2><h2 id="滚动广告区域"><a href="#滚动广告区域" class="headerlink" title="滚动广告区域"></a>滚动广告区域</h2><h2 id="滚动数字"><a href="#滚动数字" class="headerlink" title="滚动数字"></a>滚动数字</h2><h2 id="收益曲线图及动画"><a href="#收益曲线图及动画" class="headerlink" title="收益曲线图及动画"></a>收益曲线图及动画</h2><h2 id="手势解锁"><a href="#手势解锁" class="headerlink" title="手势解锁"></a>手势解锁</h2><p>## </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RN-记录的组件&quot;&gt;&lt;a href=&quot;#RN-记录的组件&quot; class=&quot;headerlink&quot; title=&quot;RN-记录的组件&quot;&gt;&lt;/a&gt;RN-记录的组件&lt;/h1&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;项目中一些组件的实现及相关实践&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="react-native" scheme="http://yoursite.com/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>rn-communication-fundamentals</title>
    <link href="http://yoursite.com/2017/03/11/rn-communication-fundamentals/"/>
    <id>http://yoursite.com/2017/03/11/rn-communication-fundamentals/</id>
    <published>2017-03-11T15:04:05.000Z</published>
    <updated>2018-07-04T17:15:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Title"><a href="#Title" class="headerlink" title="Title"></a>Title</h1><hr><blockquote><p>描述</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Title&quot;&gt;&lt;a href=&quot;#Title&quot; class=&quot;headerlink&quot; title=&quot;Title&quot;&gt;&lt;/a&gt;Title&lt;/h1&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;描述&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="react-native" scheme="http://yoursite.com/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>RN-Gesture</title>
    <link href="http://yoursite.com/2017/03/11/rn-gesture-usage/"/>
    <id>http://yoursite.com/2017/03/11/rn-gesture-usage/</id>
    <published>2017-03-11T15:01:44.000Z</published>
    <updated>2018-07-04T17:15:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Title"><a href="#Title" class="headerlink" title="Title"></a>Title</h1><hr><blockquote><p>描述</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Title&quot;&gt;&lt;a href=&quot;#Title&quot; class=&quot;headerlink&quot; title=&quot;Title&quot;&gt;&lt;/a&gt;Title&lt;/h1&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;描述&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>rn-f8app</title>
    <link href="http://yoursite.com/2017/03/11/rn-f8app/"/>
    <id>http://yoursite.com/2017/03/11/rn-f8app/</id>
    <published>2017-03-11T14:58:10.000Z</published>
    <updated>2018-07-04T17:15:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Title"><a href="#Title" class="headerlink" title="Title"></a>Title</h1><hr><blockquote><p>描述</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Title&quot;&gt;&lt;a href=&quot;#Title&quot; class=&quot;headerlink&quot; title=&quot;Title&quot;&gt;&lt;/a&gt;Title&lt;/h1&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;描述&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RN-Animation</title>
    <link href="http://yoursite.com/2017/03/11/rn-animation-usage/"/>
    <id>http://yoursite.com/2017/03/11/rn-animation-usage/</id>
    <published>2017-03-11T14:53:46.000Z</published>
    <updated>2018-07-04T17:15:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ReactNative-Animation"><a href="#ReactNative-Animation" class="headerlink" title="ReactNative Animation"></a>ReactNative Animation</h2><h3 id="InteractionManager"><a href="#InteractionManager" class="headerlink" title="InteractionManager"></a>InteractionManager</h3><blockquote><p>这里提及InteractionManager是因为InteractionManager的使用可以帮助我们实现更好的动画交互</p></blockquote><hr><h4 id="几种动画交互优化的实现"><a href="#几种动画交互优化的实现" class="headerlink" title="几种动画交互优化的实现"></a>几种动画交互优化的实现</h4><ul><li>InteractionManager //通常用于场景切换时的过场动画和异步数据加载</li><li>requestAnimationFrame(): 用来执行在一段时间内控制视图动画的代码</li><li>setImmediate/setTimeout/setInterval(): 在稍后执行代码。注意这有可能会延迟当前正在进行的动画。</li><li>runAfterInteractions(): 在稍后执行代码，不会延迟当前进行的动画。<a id="more"></a><blockquote><p>第三种实测无太大影响，但尽量避免并行动画时使用setTimeout(由于其不确定性，有可能导致动画执行顺序更改)</p></blockquote></li></ul><p>1、用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">InteractionManager.runAfterInteractions(() =&gt; &#123;</span><br><span class="line">  // ...耗时较长的同步的任务...</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var handle = InteractionManager.createInteractionHandle();</span><br><span class="line">// 执行动画... (`runAfterInteractions`中的任务现在开始排队等候)</span><br><span class="line">// 在动画完成之后 执行动画的方法机会写在这个中间就行了</span><br><span class="line">InteractionManager.clearInteractionHandle(handle);</span><br><span class="line">// 在所有句柄都清除之后，现在开始依序执行队列中的任务</span><br></pre></td></tr></table></figure><blockquote><p>runAfterInteractions接受一个普通的回调函数，或是一个PromiseTask对象，该对象需要带有名为gen的方法，并返回一个Promise。如果提供的参数是一个PromiseTask， 那么即便它是异步的它也会阻塞任务队列，直到它（以及它所有的依赖任务，哪怕这些依赖任务也是异步的）执行完毕后，才会执行下一个任务。</p></blockquote><blockquote><p>默认情况下，排队的任务会在一次setImmediate方法中依序批量执行。如果你调用了setDeadLine方法并设定了一个正整数值，则任务只会在设定的时间到达后开始执行。在此之前，任务会通过setTimeout来挂起并阻塞其他任务执行，这样可以给诸如触摸交互一类的事件留出时间，使应用可以更快地响应用户。</p></blockquote><ul><li>runAfterInteractions(callback: Function) 安排一个函数在所有的交互和动画完成之后运行。返回一个可取消的promise。</li><li>createInteractionHandle() 通知管理器有某个动画或者交互开始了。</li><li>clearInteractionHandle(handle: Handle) 通知管理器有某个动画或者交互已经结束了。</li><li>setDeadline(deadline: number) 如果设定了一个正整数值，则会使用setTimeout来挂起所有尚未执行的任务。在eventLoopRunningTime到达设定时间后，才开始使用一个setImmediate方法来批量执行所有任务。</li></ul><p>2、属性</p><ul><li>Events</li><li>addListener</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// jest中的示例用法，自己并未具体实现</span><br><span class="line">beforeEach(() =&gt; &#123;</span><br><span class="line">jest.resetModules();</span><br><span class="line">InteractionManager = require(&apos;InteractionManager&apos;);</span><br><span class="line"></span><br><span class="line">interactionStart = jest.fn();</span><br><span class="line">interactionComplete = jest.fn();</span><br><span class="line"></span><br><span class="line">InteractionManager.addListener(</span><br><span class="line">  InteractionManager.Events.interactionStart,</span><br><span class="line">  interactionStart</span><br><span class="line">);</span><br><span class="line">InteractionManager.addListener(</span><br><span class="line">  InteractionManager.Events.interactionComplete,</span><br><span class="line">  interactionComplete</span><br><span class="line">);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Animations"><a href="#Animations" class="headerlink" title="Animations"></a>Animations</h3><p>1、 LayoutAnimation </p><blockquote><p>LayoutAnimation 神器😁。 允许你在全局范围内创建和更新动画，这些动画会在下一次渲染或布局周期运行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//android </span><br><span class="line">UIManager.setLayoutAnimationEnabledExperimental &amp;&amp; UIManager.setLayoutAnimationEnabledExperimental(true);</span><br><span class="line">//在需要的地方设置当前页面动画</span><br><span class="line">LayoutAnimation.configureNext(LayoutAnimation.Presets.spring);</span><br></pre></td></tr></table></figure><ul><li>easeInEaseOut //缓入缓出</li><li>linear //线性</li><li>spring //弹跳</li><li>easeIn //缓入</li><li>easeOut //缓出</li><li>keyboard //键入</li></ul><blockquote><p>也可以自定义动画效果</p></blockquote><p>2、Animated.Value</p><blockquote><p>最基本的一个动画使用方式是创建一个Animated.Value,将该动画绑定到一个或者多个样式属性到动画组件中，然后通过开启动画运行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">this.state = &#123;bounceValue: new Animated.Value(0),&#125;</span><br><span class="line">Animated.spring(</span><br><span class="line">  this.state.bounceValue,</span><br><span class="line">  &#123;</span><br><span class="line">    toValue: 0.8,</span><br><span class="line">    friction: 1</span><br><span class="line">  &#125;</span><br><span class="line">).start();</span><br></pre></td></tr></table></figure><p>// 东西略多。。。</p><p><a href="http://reactnative.cn/docs/0.41/animations.html" target="_blank" rel="external">0</a></p><p><a href="http://www.lcode.org/react-native%E8%BF%9B%E9%98%B6%E4%B9%8Banimated%E5%8A%A8%E7%94%BB%E5%BA%93%E8%AF%A6%E8%A7%A3-%E5%9F%BA%E7%A1%80%E7%AF%8764/" target="_blank" rel="external">1</a></p><p><a href="http://www.lcode.org/react-native%E8%BF%9B%E9%98%B6%E4%B9%8Banimated%E5%8A%A8%E7%94%BB%E5%BA%93%E8%AF%A6%E8%A7%A3-%E5%AE%9E%E4%BE%8B%E7%AF%8765/" target="_blank" rel="external">2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ReactNative-Animation&quot;&gt;&lt;a href=&quot;#ReactNative-Animation&quot; class=&quot;headerlink&quot; title=&quot;ReactNative Animation&quot;&gt;&lt;/a&gt;ReactNative Animation&lt;/h2&gt;&lt;h3 id=&quot;InteractionManager&quot;&gt;&lt;a href=&quot;#InteractionManager&quot; class=&quot;headerlink&quot; title=&quot;InteractionManager&quot;&gt;&lt;/a&gt;InteractionManager&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;这里提及InteractionManager是因为InteractionManager的使用可以帮助我们实现更好的动画交互&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h4 id=&quot;几种动画交互优化的实现&quot;&gt;&lt;a href=&quot;#几种动画交互优化的实现&quot; class=&quot;headerlink&quot; title=&quot;几种动画交互优化的实现&quot;&gt;&lt;/a&gt;几种动画交互优化的实现&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;InteractionManager //通常用于场景切换时的过场动画和异步数据加载&lt;/li&gt;
&lt;li&gt;requestAnimationFrame(): 用来执行在一段时间内控制视图动画的代码&lt;/li&gt;
&lt;li&gt;setImmediate/setTimeout/setInterval(): 在稍后执行代码。注意这有可能会延迟当前正在进行的动画。&lt;/li&gt;
&lt;li&gt;runAfterInteractions(): 在稍后执行代码，不会延迟当前进行的动画。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="react-native" scheme="http://yoursite.com/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>RN-混合开发</title>
    <link href="http://yoursite.com/2017/03/11/rn-mixeddevelopment/"/>
    <id>http://yoursite.com/2017/03/11/rn-mixeddevelopment/</id>
    <published>2017-03-11T13:20:34.000Z</published>
    <updated>2018-07-04T17:15:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RN集成到原生项目"><a href="#RN集成到原生项目" class="headerlink" title="RN集成到原生项目"></a>RN集成到原生项目</h1><hr><blockquote><p>集成是双向的，RN很好的解决了这个问题。原生项目中使用RN开发还是很方便的。</p></blockquote><h2 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h2><h3 id="原生混和开发："><a href="#原生混和开发：" class="headerlink" title="原生混和开发："></a>原生混和开发：</h3><h4 id="一、开发配置"><a href="#一、开发配置" class="headerlink" title="一、开发配置"></a>一、开发配置</h4><blockquote><p><a href="http://www.jianshu.com/p/3dc9d70a790f" target="_blank" rel="external">参考</a></p></blockquote><h5 id="1-IOS项目中搭建RN开发环境-见参考"><a href="#1-IOS项目中搭建RN开发环境-见参考" class="headerlink" title="1. IOS项目中搭建RN开发环境(见参考)"></a>1. IOS项目中搭建RN开发环境(见参考)</h5><h5 id="2-创建package-json"><a href="#2-创建package-json" class="headerlink" title="2. 创建package.json"></a>2. 创建package.json</h5><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;MyRNApp&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.1&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;node node_modules/react-native/local-cli/cli.js start&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;react&quot;: &quot;15.2.1&quot;,</span><br><span class="line">    &quot;react-native&quot;: &quot;0.31.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">====&gt; npm install</span><br></pre></td></tr></table></figure><h5 id="3-安装CocoaPods"><a href="#3-安装CocoaPods" class="headerlink" title="3. 安装CocoaPods"></a>3. 安装CocoaPods</h5><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Uncomment this line to define a global platform for your project</span></span><br><span class="line"><span class="meta"># platform :ios, '9.0'</span></span><br><span class="line"></span><br><span class="line">target 'MyRNApp' do</span><br><span class="line">  <span class="meta"># Uncomment this line if you're using Swift or would like to use dynamic frameworks</span></span><br><span class="line">  <span class="meta"># use_frameworks!</span></span><br><span class="line"></span><br><span class="line">  <span class="meta"># Pods for MyRNApp</span></span><br><span class="line"></span><br><span class="line">    pod 'React', :path =&gt; 'node_modules/react-native', :subspecs =&gt; [</span><br><span class="line">    'ART',</span><br><span class="line">    'RCTActionSheet',</span><br><span class="line">    'RCTAdSupport',</span><br><span class="line">    'RCTGeolocation',</span><br><span class="line">    'RCTImage',</span><br><span class="line">    'RCTNetwork',</span><br><span class="line">    'RCTPushNotification',</span><br><span class="line">    'RCTSettings',</span><br><span class="line">    'RCTText',</span><br><span class="line">    'RCTVibration',</span><br><span class="line">    'RCTWebSocket',</span><br><span class="line">    'RCTLinkingIOS'</span><br><span class="line">    <span class="meta"># Add any other subspecs you want to use in your project</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">  target 'MyRNAppTests' do</span><br><span class="line">    inherit! :search_paths</span><br><span class="line">    <span class="meta"># Pods for testing</span></span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  target 'MyRNAppUITests' do</span><br><span class="line">    inherit! :search_paths</span><br><span class="line">    <span class="meta"># Pods for testing</span></span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">注意path的路径设置,默认根目录,也可文件夹中</span><br><span class="line">====&gt; pod install 喽~</span><br></pre></td></tr></table></figure><h4 id="二、开始开发"><a href="#二、开始开发" class="headerlink" title="二、开始开发"></a>二、开始开发</h4><h5 id="1-创建index-ios-js"><a href="#1-创建index-ios-js" class="headerlink" title="1. 创建index.ios.js"></a>1. 创建index.ios.js</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line">import React, &#123;Component&#125; from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">import &#123;</span><br><span class="line">    Text,</span><br><span class="line">    View,</span><br><span class="line">    AppRegistry</span><br><span class="line">&#125; from &apos;react-native&apos;;</span><br><span class="line"></span><br><span class="line">class NativeRNApp extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;View &gt;</span><br><span class="line">        &lt;Text&gt;This is a simple application.&lt;/Text&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">AppRegistry.registerComponent(&apos;NativeRNApp&apos;, () =&gt; NativeRNApp);</span><br></pre></td></tr></table></figure><h5 id="2-设置JS入口"><a href="#2-设置JS入口" class="headerlink" title="2. 设置JS入口"></a>2. 设置JS入口</h5><blockquote><p>注: 可以直接就设置到默认的ViewController,也可以自己写个ReactViewController</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    [<span class="keyword">self</span> initRNView];</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</span><br><span class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)initRNView &#123;</span><br><span class="line">   <span class="built_in">NSString</span> * strUrl = <span class="string">@"http://localhost:8081/index.ios.bundle?platform=ios&amp;dev=true"</span>;</span><br><span class="line">    <span class="built_in">NSURL</span> * jsCodeLocation = [<span class="built_in">NSURL</span> URLWithString:strUrl];</span><br><span class="line"></span><br><span class="line">    RCTRootView * rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation</span><br><span class="line">                                                         moduleName:<span class="string">@"NativeRNApp"</span></span><br><span class="line">                                                  initialProperties:<span class="literal">nil</span></span><br><span class="line">                                                      launchOptions:<span class="literal">nil</span>];</span><br><span class="line">    <span class="keyword">self</span>.view = rootView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">===&gt; moduleName:<span class="string">@"NativeRNApp"</span> 注意这个名称要和index.ios.js 中的对应上</span><br></pre></td></tr></table></figure><h5 id="3-一些问题记录"><a href="#3-一些问题记录" class="headerlink" title="3. 一些问题记录"></a>3. 一些问题记录</h5><blockquote><p><a href="http://blog.csdn.net/u014410695/article/details/50635842" target="_blank" rel="external">参考</a></p></blockquote><p>报错: App Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure 报错原因是需要开启内网http的访问权限（iOS9之后会有这个问题）。</p><blockquote><p>在Info.plist中添加 NSAppTransportSecurity 类型 Dictionary ;<br>在 NSAppTransportSecurity 下添加 NSAllowsArbitraryLoads 类型Boolean ,值设为 YES;<br>参考地址：</p></blockquote><p>-</p><p>报错：RCTStatusBarManager module requires that the UIViewControllerBasedStatusBarAppearance key in the Info.plist is set to NO 错误信息说的很清楚了。</p><blockquote><p>在Info.plist中添加View controller-based status bar appearance为NO。<br><a href="http://www.cnblogs.com/chglog/p/4746683.html" target="_blank" rel="external">http://www.cnblogs.com/chglog/p/4746683.html</a></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/11/rn-mixeddevelopment/3fb2e1d5b4f654d5.png" alt="Markdown" title="">                </div>                <div class="image-caption">Markdown</div>            </figure><p>应该还要在项目中设置node_modules的查找路径的…忘了在哪设置的了</p><hr><h3 id="集成已有RN模块-jsbundle-："><a href="#集成已有RN模块-jsbundle-：" class="headerlink" title="集成已有RN模块(jsbundle)："></a>集成已有RN模块(jsbundle)：</h3><blockquote><p>RN的项目直接作为模块嵌入到已有项目中</p></blockquote><h4 id="一、开发配置-1"><a href="#一、开发配置-1" class="headerlink" title="一、开发配置"></a>一、开发配置</h4><blockquote><p>同上</p></blockquote><h4 id="二、开始开发-1"><a href="#二、开始开发-1" class="headerlink" title="二、开始开发"></a>二、开始开发</h4><h5 id="2-1-RNApp-打包jsbundle及资源文件"><a href="#2-1-RNApp-打包jsbundle及资源文件" class="headerlink" title="2-1 RNApp 打包jsbundle及资源文件"></a>2-1 RNApp 打包jsbundle及资源文件</h5><blockquote><p><a href="http://tutudev.com/2016/05/11/code-push-tutorial/" target="_blank" rel="external">参考</a></p></blockquote><h6 id="打包："><a href="#打包：" class="headerlink" title="打包："></a>打包：</h6><ul><li>(仅JS)</li></ul><blockquote><p>react-native bundle –parameter ios –entry-file index.ios.js –bundle-output ./testCodePush/APP_task010001.js</p></blockquote><ul><li>(包含图片等资源)</li></ul><blockquote><p>react-native bundle –parameter ios –entry-file index.ios.js –bundle-output ./bundles/SwitchCheck010004.js –assets-dest ./bundles</p></blockquote><h5 id="2-2-嵌入原生项目"><a href="#2-2-嵌入原生项目" class="headerlink" title="2-2 嵌入原生项目"></a>2-2 嵌入原生项目</h5><ul><li>把打包出来的jsbundle及assets复制到项目根目录</li><li>更改入口文件</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)initRNView &#123;</span><br><span class="line">    <span class="built_in">NSURL</span> *jsCodeLocation;</span><br><span class="line">    jsCodeLocation = [[<span class="built_in">NSBundle</span> mainBundle] URLForResource:<span class="string">@"main"</span> withExtension:<span class="string">@"jsbundle"</span>];</span><br><span class="line">    RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation</span><br><span class="line">                                                        moduleName:<span class="string">@"JucaiApp"</span></span><br><span class="line">                                                 initialProperties:<span class="literal">nil</span></span><br><span class="line">                                                     launchOptions:<span class="literal">nil</span>];</span><br><span class="line">    <span class="built_in">CGRect</span> rect = [[<span class="built_in">UIScreen</span> mainScreen] bounds];</span><br><span class="line">    rootView.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, rect.size.width, rect.size.height);</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:rootView];</span><br><span class="line">&#125;</span><br><span class="line">===&gt; 同样注意程序入口名称JucaiApp</span><br></pre></td></tr></table></figure><blockquote><p>注：如果遇到确实某个RN项目package.json中配置的第三方依赖模块缺失，则需要在手动加到现有原生项目中(podfile维护即可)，但正常情况下是不需要滴.</p></blockquote><p>差一个目录的截图</p><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><h4 id="原生混和开发：-1"><a href="#原生混和开发：-1" class="headerlink" title="原生混和开发："></a>原生混和开发：</h4><h4 id="一、开发配置-2"><a href="#一、开发配置-2" class="headerlink" title="一、开发配置"></a>一、开发配置</h4><ul><li>创建package.json 文件并npm install</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">compile &quot;com.facebook.react:react-native:+&quot;</span><br><span class="line">compile &apos;com.android.support:appcompat-v7:23.4.0&apos;</span><br><span class="line">compile fileTree(dir: &quot;libs&quot;, include: [&quot;*.jar&quot;])</span><br><span class="line">compile project(&apos;:@remobile/react-native-toast&apos;)</span><br><span class="line">&#125;</span><br><span class="line">==&gt; 要用的库这样加进去,也可以Open Model Setting 添加依赖</span><br></pre></td></tr></table></figure><ul><li>MainApplication 实现 ReactApplication并重载相关方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//facebook/react/ReactNativeHost.java</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">getJSMainModuleName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"index.android"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="meta">@Nullable</span> <span class="function">String <span class="title">getBundleAssetName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"index.android.bundle"</span>;</span><br><span class="line">&#125;</span><br><span class="line">==&gt; <span class="number">0.28</span>or0.29以后就默认情况下就会默认设定加载，具体可参考ReactNativeHost.java</span><br></pre></td></tr></table></figure><ul><li>build.gradle 添加设置node_modules的路径</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenLocal()</span><br><span class="line">        jcenter()</span><br><span class="line">        maven &#123;</span><br><span class="line">            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm</span><br><span class="line">            url &quot;$rootDir/../node_modules/react-native/android&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暂未做在混合开发中配置RN DEBUG 方式，可以查看ReactNativeHost.java 配置即可</p><h4 id="二、开始开发-2"><a href="#二、开始开发-2" class="headerlink" title="二、开始开发"></a>二、开始开发</h4><h5 id="2-1-创建index-android-js"><a href="#2-1-创建index-android-js" class="headerlink" title="2-1 创建index.android.js"></a>2-1 创建index.android.js</h5><blockquote><p>如果入口文件配置OK则就可看到RN开发页面了.</p></blockquote><blockquote><p>同样，用RN开发的模块应该放在单独的目录中.</p></blockquote><hr><h4 id="集成已有RN模块-jsbundle-：-1"><a href="#集成已有RN模块-jsbundle-：-1" class="headerlink" title="集成已有RN模块(jsbundle)："></a>集成已有RN模块(jsbundle)：</h4><h4 id="一、开发配置-3"><a href="#一、开发配置-3" class="headerlink" title="一、开发配置"></a>一、开发配置</h4><blockquote><p>同样和IOS配置一样，这里需要android项目搭建好基本的RN开发环境</p></blockquote><h4 id="二、开始开发-3"><a href="#二、开始开发-3" class="headerlink" title="二、开始开发"></a>二、开始开发</h4><h5 id="2-1-打包jsbundle及资源文件"><a href="#2-1-打包jsbundle及资源文件" class="headerlink" title="2-1 打包jsbundle及资源文件"></a>2-1 打包jsbundle及资源文件</h5><p>打包命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native bundle android --entry-file index.android.js --bundle-output ./bundles/index.android.bundle.js --assets-dest ./bundles --dev false</span><br></pre></td></tr></table></figure></p><blockquote><p>同样，打包完毕后会有一些图片的资源文件夹，直接复制到res目录中</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/11/rn-mixeddevelopment/aaa7347988b2c71a.png" alt="Markdown" title="">                </div>                <div class="image-caption">Markdown</div>            </figure><h5 id="2-2-配置加载的jsbundle"><a href="#2-2-配置加载的jsbundle" class="headerlink" title="2-2 配置加载的jsbundle"></a>2-2 配置加载的jsbundle</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected String getBundleAssetName()&#123;</span><br><span class="line">    return &quot;main.jsbundle&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="到此，原生中集成RN开发流程就完成啦！"><a href="#到此，原生中集成RN开发流程就完成啦！" class="headerlink" title="到此，原生中集成RN开发流程就完成啦！"></a>到此，原生中集成RN开发流程就完成啦！</h3><blockquote><p>参考项目后面会做</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RN集成到原生项目&quot;&gt;&lt;a href=&quot;#RN集成到原生项目&quot; class=&quot;headerlink&quot; title=&quot;RN集成到原生项目&quot;&gt;&lt;/a&gt;RN集成到原生项目&lt;/h1&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;集成是双向的，RN很好的解决了这个问题。原生项目中使用RN开发还是很方便的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;IOS&quot;&gt;&lt;a href=&quot;#IOS&quot; class=&quot;headerlink&quot; title=&quot;IOS&quot;&gt;&lt;/a&gt;IOS&lt;/h2&gt;&lt;h3 id=&quot;原生混和开发：&quot;&gt;&lt;a href=&quot;#原生混和开发：&quot; class=&quot;headerlink&quot; title=&quot;原生混和开发：&quot;&gt;&lt;/a&gt;原生混和开发：&lt;/h3&gt;&lt;h4 id=&quot;一、开发配置&quot;&gt;&lt;a href=&quot;#一、开发配置&quot; class=&quot;headerlink&quot; title=&quot;一、开发配置&quot;&gt;&lt;/a&gt;一、开发配置&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/3dc9d70a790f&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;1-IOS项目中搭建RN开发环境-见参考&quot;&gt;&lt;a href=&quot;#1-IOS项目中搭建RN开发环境-见参考&quot; class=&quot;headerlink&quot; title=&quot;1. IOS项目中搭建RN开发环境(见参考)&quot;&gt;&lt;/a&gt;1. IOS项目中搭建RN开发环境(见参考)&lt;/h5&gt;&lt;h5 id=&quot;2-创建package-json&quot;&gt;&lt;a href=&quot;#2-创建package-json&quot; class=&quot;headerlink&quot; title=&quot;2. 创建package.json&quot;&gt;&lt;/a&gt;2. 创建package.json&lt;/h5&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="react-native" scheme="http://yoursite.com/tags/react-native/"/>
    
  </entry>
  
</feed>
